import os
import atexit
import itertools


def get_subdirs_with_sconscript(path):
	""" Return list of all subdirs that contain a SConscript file """
	subdirs = [name for name in os.listdir(path) \
			  if os.path.isdir(os.path.join(path,name)) \
				and name[0] != '.']
	sd_with_scons = [sd for sd in subdirs \
						if os.path.isfile(os.path.join(sd,'SConscript'))]
	return sd_with_scons

def get_subdir_sconscripts(path):
	""" Return a list of paths to any sconscript file in a subdir.
	Note that this is not recursive."""
	subdirs = get_subdirs_with_sconscript(path)
	scons_files = ['{0}/SConscript'.format(sd) for sd in subdirs]
	return scons_files

env = Environment(CC = 'kremlin-gcc', CXX = 'kremlin-g++', ENV = {'PATH' : os.environ['PATH']})

def get_srcs():
	srcs = Glob('*.c')
	srcs += Glob('*.cpp')
	return srcs

def build_benchmark(name):
	srcs = get_srcs()
	bench = env.Program(name,srcs)
	return bench

def create_kremlin_bin(bench):
	assert len(bench) == 1
	bin_path = os.path.join(os.getcwd(),bench[0].name)
	cmd_string = bin_path + ' --kremlin-output=$TARGET' \
					+ ' --kremlin-log-output=/dev/null'
	return env.Command('kremlin.bin', bench, cmd_string)

"""
def create_reference_bin(krem_bin):
	ref_bin = env.Command('kremlin.bin.ref', krem_bin, Copy("$TARGET","$SOURCE"))
	return ref_bin
"""

Export('env get_srcs build_benchmark create_kremlin_bin \
			get_subdir_sconscripts')

results = SConscript(['c/SConscript',
						'cpp/SConscript'])

def flatten_list(l):
	""" Builds flattened version of list or tuple. Otherwise,just returns the
	parameter. """
	if type(l) is list or type(l) is tuple:
		flat = []
		for i in l:
			flat.extend(flatten_list(i))
		return flat
	else:
		return l

flattened_results = flatten_list(results)
result_bins = [r for r in flattened_results if r.name == 'kremlin.bin']
result_execs = [r for r in flattened_results if r not in result_bins]

def print_build_failures():
	from SCons.Script import GetBuildFailures
	failures = GetBuildFailures()
	if len(failures) > 0:
		print '\n\n*******************'
		print 'WARNING! The following benchmarks failed: '

	for bf in failures:
		print "\t%s" % os.path.dirname(str(bf.node))

build_all = env.Alias('buildAll', result_execs)
run_all = env.Alias('runAll', result_bins)

atexit.register(print_build_failures)
